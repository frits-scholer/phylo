§1 Introduction

Purpose of this document is to document different versions of the phylo C++ routines
Current version phylo1.cpp
[Data structure]
The treefile is read into a heap of nodes which are the basic datastrucure
node has:
     fields for a left and right subtree,
     a field for the parent node,
     a float for the distance to its parent,
     a string to name the node or the leaf
     a vector containing the distributions of all the interleaf distances of subtended leaves
     auxiliary fields (e.g. selected) to help processing
The leaves are also stored in a vector of node pointers     
[Set up tree]
     	User input: treefile, min nr of leaves and gamma
	build_tree takes a filename as input and scans tokens assumed to be in newick format
	Every left parenthesis causes a push on the stack of the current node and the
	creation of a left subtree
	Every comma causes causes a right subtree with parent link to the top of the stack
	to be created
	Every string causes the current node to be added to the vector of leaves
[Get minimimum nr of leaves and gamma from user]
     	These are stored in int variables ml(global) and gamma
[Select clades]
	select_clades(root) calculates recursively for all nodes nr of subtended leaves
	and sets select to true if this nr is >= ml (that is why ml is global)
	(uses post order traversal)
[Store interleaf distances]
        for all selected leaves store the interleaf distance in the common ancestor and
	all its ancestors. Each of these ancestors has a vector called D (distribution of
	distances)
	process_distance is called for all pairs of leaves:
	if the common ancestor has selected = false go to the parent until a common ancestor
	with selected = true is reached then for this node and all parents increment the nodes
	Then to calculate the mean of interleaf distances call inOrder(root)
	to store a mean and a node pointer in a pair called node_mean for all nodes
	for which selected = true
	These are all stored in a vector of node_mean called means
[Calc grand median]
        vector means is sorted (by the mean)
	Calculate median of these means: gm
[Calc mad]
	Calc mad for i such that mu(i) >= gm mad = median(mu(i)-gm)
[Clear previous selection]
        clear(root) recursively sets selected to false (in order traversal)
[Filter]
	keep i with mu(i) <= gm +(gamma*mad)
	other elements are erased from vector means
	set selected = true for all elements of vector means
	call preOrder(root) to turn set selected = true for all subtended leaves
[Presort the distributions]
	call preSort(root) to recursively sort all the distribution vectors of the internal nodes
	
[Create selected nodes]
	The selected nodes are sequentially added to a vector of node pointers sel_nodes

[Print leaves of selected nodes]	
[Calculate p values]
[Calculate q values]
[Print ancestors of selected nodes]	

§2 The solver

maximize z = sum (ni*li) , ni are boolean variables, li are nr of subtended leaves
subject to

pi = ni + sum(nk), k != i and nk ancestor of ni,  pi <=1

rij = (2 - ni - nj) * C, rij >= qij - FDR where qij are the q values and C is arbitrarily large (say 1000)

(this is equivalent to if  ni=nj=1 then qij <= FDR)
Normalizing the parameters we get:
r'ij = rij - 2C
     r'ij = (-C)ni + (-C)nj
     r'ij >= qij - FDR - 2C
r"ij = -r'ij
     r"ij = Cni + Cnj
     r"ij <= 2C + FDR - qij
     
The idea is for a first version use a slightly modified version of il1.out
to be generated by phylo2.cpp
called constraints1.in as input file with a default FDR of 0.05
layout of cluster1.cpp
[3 Get input]
[Normalize problem variables]
[Solve problem]
[Output solution]

§3 Get input

[Get object coefficients]

§4 Version 2

program phylo1_v2.cpp
first let's calc the interleaf distances better done with calc_mean
documentation and phylo1.cpp are updated
for edyth.nwk, input file il3.in
Minimum nr of leaves: 3 Gamma:  3
Output:
size of means =  3059 grand median = 0.00553652
mad = 0.00430358
size of filtered means = 2786
output in 4937.32 seconds
program phylo1_v3.cpp
only compares nodes with common parents(siblings) if not ancestral
really fast
