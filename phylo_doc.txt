ยง1 Introduction

Purpose of this document is to document different versions of the phylo C++ routines
Current version phylo1.cpp
[Data structure]
The treefile is read into a heap of nodes which are the basic datastrucure
node has:
     fields for a left and right subtree,
     a field for the parent node,
     a float for the distance to its parent,
     a string to name the node or the leaf
     a vector containing the distributions of all the interleaf distances of subtended leaves
     auxiliary fields (e.g. selected) to help processing
The leaves are also stored in a vector of node pointers     
[Set up tree]
     	User input: treefile, min nr of leaves and gamma
	build_tree takes a filename as input and scans tokens assumed to be in newick format
	Every left parenthesis causes a push on the stack of the current node and the
	creation of a left subtree
	Every comma causes causes a right subtree with parent link to the top of the stack
	to be created
	Every string causes the current node to be added to the vector of leaves
[Get minimimum nr of leaves and gamma from user]
     	These are stored in int variables ml(global) and gamma
[Select clades]
	select_clades(root) calculates recursively for all nodes nr of subtended leaves
	and sets select to true if this nr is >= ml (that is why ml is global)
	(uses post order traversal)
[Set up interleaf distances]	
	Calc for clades with at least min nr of leaves (i.e. select = true)
	process_distance is called for all pairs of leaves:
	if the common ancestor has selected = false go to the parent until a common ancestor
	with selected = true is reached then for this node and all parents increment the nodes
	count (how many pairs) and increment the interleaf total distance with
	the pair interleaf distance
	Then to calculate the mean of interleaf distances call inOrder(root)
	to store a mean and a node pointer in a pair called node_mean for all nodes
	for which selected = true
	These are all stored in a vector of node_mean called means
[Calc grand median]
        vector means is sorted (by the mean)
	Calculate median of these means: gm
[Calc mad]
	Calc mad for i such that mu(i) >= gm mad = median(mu(i)-gm)
[Clear previous selection]
        clear(root) recursively sets selected to false (in order traversal)
[Filter]
	keep i with mu(i) <= gm +(gamma*mad)
	other elements are erased from vector means
	set selected = true for all elements of vector means
	call preOrder(root) to turn set selected = true for all subtended leaves
[Store interleaf distances]
        for all selected leaves store the interleaf distance in the common ancestor and
	all its ancestors. Each of these ancestors has a vector called D (distribution of
	distances)
[Presort the distributions]
	call preSort(root) to recursively sort all the distribution vectors of the internal nodes
	
[Create selected nodes]
	The selected nodes are sequentially added to a vector of node pointers sel_nodes

[Print leaves of selected nodes]	
[Calculate p values]
[Calculate q values]
[Print ancestors of selected nodes]	
