§1 Introduction

preliminary program interleaf.cpp

[Set up tree]
     	User input: treefile, min nr of leaves and gamma
[Select clades]
	Calc for clades with at least min nr of leaves mean of interleaf distances
[Calc grand median]
	Calc median of these means gm
[Calc mad]
	Calc mad for i such that mu(i) >= gm mad = median(mu(i)-gm)
[Filter]
	keep i with mu(i) <= gm +(gamma*mad)
[Get distributions]
	For all i calc D(i) = {interleaf distances for clade with mu(i)}
[Get Q values]
	set up KS in ks.cpp

§2 Set up tree

means.cpp is used to develop the data structures

While calculating ild calc sum and count and store in selected ancestors
Then traverse the tree in any order (inorder) and store the means in a vector
consisting of (mean, node pointer), which can then be sorted. This is the output of
means.cpp

§3 Calc grand median

This is trivially the element at means.size()/2 (vector indices are 0-based)
or if this is even the average of 2 middle elements.
This is the ouput of gm.cpp.

§4 Calc mad

Since median(mu(i) - gm) = median(mu(i)) - gm where mu(i) >= gm
In extreme cases there are a lot of elements equal to the median
This (and gm) is the output of mad.cpp

§5 Filter

First we calculate upperbound = gm + gamma*mad
Then using the means vector we erase everything with a mean greater than upperbound
Output of filter.cpp

§6 Get distributions

We have the clades with their means in the vector means
we could turn the select value of all nodes off now
and then turn the nodes for all the nodes in means back on.
see distrib.cpp


§7 Statistics

use pre-sorted data in KS method see kstwo.hpp
If selected nodes have ancestral relationship calc p value
else take max of p value with common ancestor
Benjamini Hochberg correction of p values
FDR 20% or 5%

§8 Debugging

interleaf_test.cpp proves the interleaf distances are right
distrib_test.cpp outputs the distributions and they are correct
grand median and mad are correct
ancestor is correct
node equivalencies
2    4
4    2
6    6
12   7
16   9
20   10
22   11
24   12
26   13
28   14

§7+ Statistics

create pvals with indices
bh.cpp with input bh1.in produces the correct bh1.out
bh_fdr.hpp contains the bh fdr correction
The final program is ksbh.cpp
when tested on the big tree I stopped the program after 30 minutes and it had produced
30 Mb file so there is a problem

There is also a problem with the ks test python version is not the same as decribed in pdf
see ks_debug.py and ks_debug.cpp
basically correct though

§8 Documentation

Include files kstwo.hpp, bh_fdr.hpp
final file ksbh.cpp
to run with toy_tree ./ksbh < il1.in
with big tree ./ksbh < ilbig.in

Make a version with multiple inputs and outputs phylo1.cpp
